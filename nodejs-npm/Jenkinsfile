pipeline {
    agent { label 'mac-sh' }

    stages {
        stage("Test Console URL Format") {
            steps {
                script {
                    try {
                        echo "üîç Testing different console URL formats..."

                        // Display environment variables first
                        echo "BUILD_URL: ${env.BUILD_URL}"
                        echo "BUILD_NUMBER: ${env.BUILD_NUMBER}"
                        echo "JOB_URL: ${env.JOB_URL}"

                        // Test different URL formats
                        def consoleUrl1 = "${env.BUILD_URL}consoleText"
                        def consoleUrl2 = "${env.BUILD_URL}console"
                        def consoleUrl3 = "${env.BUILD_URL}consoleFull"

                        echo "Format 1 (consoleText): ${consoleUrl1}"
                        echo "Format 2 (console): ${consoleUrl2}"
                        echo "Format 3 (consoleFull): ${consoleUrl3}"

                        // Test with curl to see which format works
                        echo "Testing consoleText format..."
                        def result1 = sh(script: "curl -s -I '${consoleUrl1}' | head -1", returnStdout: true)
                        echo "consoleText response: ${result1}"

                        echo "Testing console format..."
                        def result2 = sh(script: "curl -s -I '${consoleUrl2}' | head -1", returnStdout: true)
                        echo "console response: ${result2}"

                        // Try to get actual content from the working URL
                        echo "Getting first few lines of console output..."
                        def content = sh(script: "curl -s '${consoleUrl1}' | head -5", returnStdout: true)
                        echo "Console content preview: ${content}"

                    } catch (Exception e) {
                        echo "‚ùå URL test failed: ${e.message}"
                    }
                }
            }
        }
    }
}

// @Library('file:///Users/madhusud/.jenkins/workflow-libs/blackduck-shared-library') _

// pipeline {

//     agent{
//         label 'mac-sh'
//     }

//    stages {
        
//        stage("Build") {
//             when {
//                 anyOf {
//                     branch 'main'
//                     branch pattern: "PR-\\d+", comparator: "REGEXP"
//                 }
//             }
//             steps {
//                 script {

//                     // Print environment variables for debugging
//                     echo "JOB_NAME: ${env.JOB_NAME}"
//                     echo "JOB_BASE_NAME: ${env.JOB_BASE_NAME}"
//                     echo "BRANCH_NAME: ${env.BRANCH_NAME}"
//                     echo "GIT_URL: ${env.GIT_URL}"
                    
//                     dir('nodejs-npm') {
//                         sh 'node --version'
//                         sh 'npm --version'
//                         sh 'npm install'
                        
//                     }
//                 }
//             }
//         }

        

//         stage("blackduck-security-scan") {
//                 steps {
//                     script {
//                         dir('nodejs-npm') {
//                             // Extract repository name from JOB_NAME
//                             def projectName = env.JOB_NAME.split('/')[0]
//                             echo "DETECT_PROJECT_NAME will be set to: ${projectName}"
    
//                             withEnv(["DETECT_PROJECT_NAME=${projectName}"]) {
//                                 security_scan blackducksca_scan_full: true, 
//                                              blackducksca_waitForScan: true, 
//                                              include_diagnostics: true, 
//                                              mark_build_status: 'FAILURE', 
//                                              product: 'blackducksca'
//                             }
//                         }
//                     }
//                 }
//         }

       
//     }

//     post {
//         always {
//             script {
//                 saveLogsToGitHub('nodejs-npm')
//             }
//         }
//     }

    
// }


